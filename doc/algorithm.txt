## NOTES:
## f[x, y] != f[y, x]
## f{x, y} == f{y, x}

###############################################################################
## UpdateGroupPotentialField:
###############################################################################
UpdateGroupPotentialField(IN goalCells, IN costField, OUT potField):
	CANDIDATES = PriorityQueue # ordering on potential from low to high
	KNOWN      = goalCells
	UNKNOWN    = allCells - goalCells

	foreach cell in KNOWN:
		potField[cell] = 0

	foreach cell in UNKNOWN:
		potField[cell] = +inf

	foreach cell in KNOWN:
		UpdateCandidates(cell)

	while (not Empty(CANDIDATES)):
		cell = Pop(CANDIDATES)
		Add(KNOWN, cell)
		UpdateCandidates(cell)


###############################################################################
## UpdateCandidates:
###############################################################################
UpdateCandidates(IN cell):
	NEIGHBOURS = Neighbours(cell)
	foreach neighbour in NEIGHBOURS-KNOWN:
		costWest  = potField[neighbour + WEST ] + costField[neighbour, neighbour + WEST ]
		costEast  = potField[neighbour + EAST ] + costField[neighbour, neighbour + EAST ]
		costNorth = potField[neighbour + NORTH] + costField[neighbour, neighbour + NORTH]
		costSouth = potField[neighbour + SOUTH] + costField[neighbour, neighbour + SOUTH]

		## potential is undefined on x axis
		if (costWest is +inf and costEast is +inf):
			minPotCellVer = ArgMin_{cell}(costNorth, costSouth)
			potField[neighbour] = Potential1(minPotCellVer)
			potFieldDelta{neighbour, minPotCellVer} = potField[neighbour] - potField[minPotCellVer]

		## potential is undefined on y axis
		elif (costNorth is +inf and costSouth is +inf):
			minPotCellHor = ArgMin_{cell}(costEast, costWest)
			potField[neighbour] = Potential1(minPotCellHor)
			potFieldDelta{neighbour, minPotCellHor} = potField[neighbour] - potField[minPotCellHor]

		## potential defined on both axis
		else:
			minPotCellHor = ArgMin_{cell}(costEast, costWest)
			minPotCellVer = ArgMin_{cell}(costNorth, costSouth)

			potField[neighbour] = Potential2(neighbour, minPotCellHor, minPotCellVer)
			potFieldDelta{neighbour, minPotCellHor} = potField[neighbour] - potField[minPotCellHor]
			potFieldDelta{neighbour, minPotCellVer} = potField[neighbour] - potField[minPotCellVer]

		Push(CANDIDATES, neighbour)


###############################################################################
## Potential1:
##
## a = pot(M)
## b = pot(i), where i in {N,S,E,W}
## c = cost(M, i)
##
## solve ((a-b)/c)^2 = 1 for a:
##   (a-b)^2 / c^2 = 1
##   (a-b)^2 = c^2
##   |(a-b)| = c
##   a-b = c, a-b = -c
##   a = b - c, a = b + c
###############################################################################
Potential1(IN curCell, IN neighbourCell):
	pot  = potField[neighbourCell]
	cost = costField[curCell, neighbourCell]

	solution1 = pot + cost
	solution2 = pot - cost
	return Max(solution1, solution2)



###############################################################################
## Potential2:
##
## m = pot(M)
## x = pot(i), where i in {E, W}
## c1= cost(M, i)
## y = pot(j), where j in {N, S}
## c2= cost(M, j)
##
## solve2 ((m-x)/c1)^2 + ((m-y)/c2)^2 = 1 for m:
##   (m-x)^2/c1^2 + (m-y)^2/c2^2 = 1
##   (((m^2 - 2*m*x + x^2)*c2) + ((m^2 - 2*m*y + y^2)*c1))/(c1^2 c2^2) = 1
##   2*m^2 - (2*x + 2*y)*m + (x^2 + y^2) - (c1^2 * c2^2) = 0
##
##   using abc-formula x = (-b +/- sqrt(b^2 - 4ac)) / 2a we get:
##   a = 2
##   b = (2b + 2d)
##   c = (b^2 + d^2) - (d^2 * e^2)
##   m = max( (-b - sqrt(b^2 - 4ac))/2a, (-b + sqrt(b^2 - 4ac))/2a )
##   
###############################################################################
Potential2(IN curCell, IN horCell, IN verCell):
	potX  = potField[horCell]
	potY  = potField[verCell]
	costX = costField[curCell, horCell]
	costY = costField[curCell, verCell]

	b = 2*potX + 2*potY
	d = sqrt(-4*potX^2 + 4*potX*potY - 4*potY^2  +  8 * costX^2 * costY^2)

	solution1 = (-b + d) / 4
	solution2 = (-b - d) / 4
	return Max(solution1, solution2)
